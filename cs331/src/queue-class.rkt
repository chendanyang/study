#lang racket
(struct queue (array [front #:mutable] [back #:mutable]))
(define (make-queue) (queue (make-vector 10) 0 0))
(define (enqueue q elt)
  (vector-set! (queue-array q) (queue-back q) elt)
  (set-queue-back! q (modulo (+ (queue-back q) 1)
                             (vector-length (queue-array q)))))
(define (dequeue q)
  (let ((top (vector-ref (queue-array q) (queue-front q))))
    (set-queue-front! q (modulo (+ (queue-front q) 1)
                                (vector-length (queue-array q))))
     top))
(define (top q)
  (vector-ref (queue-array q) ( queue-front q)))