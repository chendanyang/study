sasaki@alpha ~ $ ~sasaki/Lab09_soln
SDC Simulator sample solution
Read memory: At the prompt, enter the value for the indicated
memory address.  Enter a number > 9999 or < -9999 when you're done.
Loc 00: -9000 9100 9225 5301 4300 2322 9400 7010 0000 0000 1002 2013 1121 0000 6001 2013 3122 9300 8113 7039 0000 3 0000 0 0 72 101 108 108 111 44 32 119 111 114 108 100 33 0 1801 3801 1000 3000 2099 5700 2700 7099 99999
Loc 01: Loc 02: Loc 03: Loc 04: Loc 05: Loc 06: Loc 07: Loc 08: Loc 09: Loc 10: Loc 11: Loc 12: Loc 13: Loc 14: Loc 15: Loc 16: Loc 17: Loc 18: Loc 19: Loc 20: Loc 21: Loc 22: Loc 23: Loc 24: Loc 25: Loc 26: Loc 27: Loc 28: Loc 29: Loc 30: Loc 31: Loc 32: Loc 33: Loc 34: Loc 35: Loc 36: Loc 37: Loc 38: Loc 39: Loc 40: Loc 41: Loc 42: Loc 43: Loc 44: Loc 45: Loc 46: Loc 47:
Initial value of memory:
   00: -9000  9100  9225  5301  4300    2322  9400  7010  0000  0000
   10:  1002  2013  1121  0000  6001    2013  3122  9300  8113  7039
   20:  0000  0003  0000  0000  0000    0072  0101  0108  0108  0111
   30:  0044  0032  0119  0111  0114    0108  0100  0033  0000  1801
   40:  3801  1000  3000  2099  5700    2700  7099  0000  0000  0000
   50:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   60:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   70:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   80:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   90:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000

Beginning execution:
At the > prompt, press return to execute the next instruction (or q to quit or h or ? for help).
>
At 00 instr 9 0 00: I/O  Read char
Enter a char (and press return): q
R0 <- 113
>
At 01 instr 9 1 00: I/O  1: Print char in R0 (= 113): q
>
At 02 instr 9 2 25: I/O  2: Print string: Hello, world!
>
At 03 instr 5 3 01: LDM  R3 <- 1
>
At 04 instr 4 3 00: NEG  R3 <- -(R3) = -1
>
At 05 instr 2 3 22: ST   M[22] <- R3 = -1
>
At 06 instr 9 4 00: I/O  4: Dump Memory
   00: -9000  9100  9225  5301  4300    2322  9400  7010  0000  0000
   10:  1002  2013  1121  0000  6001    2013  3122  9300  8113  7039
   20:  0000  0003 -0001  0000  0000    0072  0101  0108  0108  0111
   30:  0044  0032  0119  0111  0114    0108  0100  0033  0000  1801
   40:  3801  1000  3000  2099  5700    2700  7099  0000  0000  0000
   50:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   60:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   70:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   80:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   90:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
>
At 07 instr 7 0 10: BR   10
>
At 10 instr 1 0 02: LD   R0 <- M[02] = 9225
>
At 11 instr 2 0 13: ST   M[13] <- R0 = 9225
>
At 12 instr 1 1 21: LD   R1 <- M[21] = 3
>
At 13 instr 9 2 25: I/O  2: Print string: Hello, world!
>
At 14 instr 6 0 01: ADDM R0 <- R0 + 01 = 9225 + 1 = 9226
>
At 15 instr 2 0 13: ST   M[13] <- R0 = 9226
>
At 16 instr 3 1 22: ADD  R1 <- R1 + M[22] = 3 + -1 = 2
>
At 17 instr 9 3 00: I/O  3: Dump Registers
  R0: 9226  R1: 0002  R2: 0000  R3:-0001  R4: 0000
  R5: 0000  R6: 0000  R7: 0000  R8: 0000  R9: 0000
>
At 18 instr 8 1 13: BRP  13 if R1 = 2 > 0: Yes
>
At 13 instr 9 2 26: I/O  2: Print string: ello, world!
>
At 14 instr 6 0 01: ADDM R0 <- R0 + 01 = 9226 + 1 = 9227
>
At 15 instr 2 0 13: ST   M[13] <- R0 = 9227
>
At 16 instr 3 1 22: ADD  R1 <- R1 + M[22] = 2 + -1 = 1
>
At 17 instr 9 3 00: I/O  3: Dump Registers
  R0: 9227  R1: 0001  R2: 0000  R3:-0001  R4: 0000
  R5: 0000  R6: 0000  R7: 0000  R8: 0000  R9: 0000
>
At 18 instr 8 1 13: BRP  13 if R1 = 1 > 0: Yes
>
At 13 instr 9 2 27: I/O  2: Print string: llo, world!
>
At 14 instr 6 0 01: ADDM R0 <- R0 + 01 = 9227 + 1 = 9228
>
At 15 instr 2 0 13: ST   M[13] <- R0 = 9228
>
At 16 instr 3 1 22: ADD  R1 <- R1 + M[22] = 1 + -1 = 0
>
At 17 instr 9 3 00: I/O  3: Dump Registers
  R0: 9228  R1: 0000  R2: 0000  R3:-0001  R4: 0000
  R5: 0000  R6: 0000  R7: 0000  R8: 0000  R9: 0000
>
At 18 instr 8 1 13: BRP  13 if R1 = 0 > 0: No
>
At 19 instr 7 0 39: BR   39
>
At 39 instr 1 8 01: LD   R8 <- M[01] = 9100
>
At 40 instr 3 8 01: ADD  R8 <- R8 + M[01] = 9100 + 9100 = 8200
>
At 41 instr 1 0 00: LD   R0 <- M[00] = -9000
>
At 42 instr 3 0 00: ADD  R0 <- R0 + M[00] = -9000 + -9000 = -8000
>
At 43 instr 2 0 99: ST   M[99] <- R0 = -8000
>
At 44 instr 5 7 00: LDM  R7 <- 0
>
At 45 instr 2 7 00: ST   M[00] <- R7 = 0
>
At 46 instr 7 0 99: BR   99
>
At 99 instr 8 0 00: BRP  00 if R0 = -8000 > 0: No
>
At 00 instr 0 0 00: HALT

Halting

Registers:
  R0:-8000  R1: 0000  R2: 0000  R3:-0001  R4: 0000
  R5: 0000  R6: 0000  R7: 0000  R8: 8200  R9: 0000

Memory:
   00:  0000  9100  9225  5301  4300    2322  9400  7010  0000  0000
   10:  1002  2013  1121  9228  6001    2013  3122  9300  8113  7039
   20:  0000  0003 -0001  0000  0000    0072  0101  0108  0108  0111
   30:  0044  0032  0119  0111  0114    0108  0100  0033  0000  1801
   40:  3801  1000  3000  2099  5700    2700  7099  0000  0000  0000
   50:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   60:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   70:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   80:  0000  0000  0000  0000  0000    0000  0000  0000  0000  0000
   90:  0000  0000  0000  0000  0000    0000  0000  0000  0000 -8000
